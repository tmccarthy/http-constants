package au.id.tmm.httpConstants

final case class HttpHeader(asString: String)

//noinspection TypeAnnotation
object HttpHeader {

  val Accept =                          HttpHeader("Accept")
  val AcceptCharset =                   HttpHeader("Accept-Charset")
  val AcceptEncoding =                  HttpHeader("Accept-Encoding")
  val AcceptLanguage =                  HttpHeader("Accept-Language")
  val AcceptRanges =                    HttpHeader("Accept-Ranges")
  val AccessControlAllowCredentials =   HttpHeader("Access-Control-Allow-Credentials")
  val AccessControlAllowHeaders =       HttpHeader("Access-Control-Allow-Headers")
  val AccessControlAllowMethods =       HttpHeader("Access-Control-Allow-Methods")
  val AccessControlAllowOrigin =        HttpHeader("Access-Control-Allow-Origin")
  val AccessControlExposeHeaders =      HttpHeader("Access-Control-Expose-Headers")
  val AccessControlMaxAge =             HttpHeader("Access-Control-Max-Age")
  val AccessControlRequestHeaders =     HttpHeader("Access-Control-Request-Headers")
  val AccessControlRequestMethod =      HttpHeader("Access-Control-Request-Method")
  val Age =                             HttpHeader("Age")
  val Allow =                           HttpHeader("Allow")
  val AltSvc =                          HttpHeader("Alt-Svc")
  val Authorization =                   HttpHeader("Authorization")
  val CacheControl =                    HttpHeader("Cache-Control")
  val ClearSiteData =                   HttpHeader("Clear-Site-Data")
  val Connection =                      HttpHeader("Connection")
  val ContentDisposition =              HttpHeader("Content-Disposition")
  val ContentEncoding =                 HttpHeader("Content-Encoding")
  val ContentLanguage =                 HttpHeader("Content-Language")
  val ContentLength =                   HttpHeader("Content-Length")
  val ContentLocation =                 HttpHeader("Content-Location")
  val ContentRange =                    HttpHeader("Content-Range")
  val ContentSecurityPolicy =           HttpHeader("Content-Security-Policy")
  val ContentSecurityPolicyReportOnly = HttpHeader("Content-Security-Policy-Report-Only")
  val ContentType =                     HttpHeader("Content-Type")
  val Cookie =                          HttpHeader("Cookie")
  val Cookie2 =                         HttpHeader("Cookie2")
  val DNT =                             HttpHeader("DNT")
  val Date =                            HttpHeader("Date")
  val ETag =                            HttpHeader("ETag")
  val EarlyData =                       HttpHeader("Early-Data")
  val Expect =                          HttpHeader("Expect")
  val ExpectCT =                        HttpHeader("Expect-CT")
  val Expires =                         HttpHeader("Expires")
  val FeaturePolicy =                   HttpHeader("Feature-Policy")
  val Forwarded =                       HttpHeader("Forwarded")
  val From =                            HttpHeader("From")
  val Host =                            HttpHeader("Host")
  val IfMatch =                         HttpHeader("If-Match")
  val IfModifiedSince =                 HttpHeader("If-Modified-Since")
  val IfNoneMatch =                     HttpHeader("If-None-Match")
  val IfRange =                         HttpHeader("If-Range")
  val IfUnmodifiedSince =               HttpHeader("If-Unmodified-Since")
  val Index =                           HttpHeader("Index")
  val KeepAlive =                       HttpHeader("Keep-Alive")
  val LargeAllocation =                 HttpHeader("Large-Allocation")
  val LastModified =                    HttpHeader("Last-Modified")
  val Location =                        HttpHeader("Location")
  val Origin =                          HttpHeader("Origin")
  val Pragma =                          HttpHeader("Pragma")
  val ProxyAuthenticate =               HttpHeader("Proxy-Authenticate")
  val ProxyAuthorization =              HttpHeader("Proxy-Authorization")
  val PublicKeyPins =                   HttpHeader("Public-Key-Pins")
  val PublicKeyPinsReportOnly =         HttpHeader("Public-Key-Pins-Report-Only")
  val Range =                           HttpHeader("Range")
  val Referer =                         HttpHeader("Referer")
  val ReferrerPolicy =                  HttpHeader("Referrer-Policy")
  val RetryAfter =                      HttpHeader("Retry-After")
  val SecWebSocketAccept =              HttpHeader("Sec-WebSocket-Accept")
  val Server =                          HttpHeader("Server")
  val ServerTiming =                    HttpHeader("Server-Timing")
  val SetCookie =                       HttpHeader("Set-Cookie")
  val SetCookie2 =                      HttpHeader("Set-Cookie2")
  val SourceMap =                       HttpHeader("SourceMap")
  val StrictTransportSecurity =         HttpHeader("Strict-Transport-Security")
  val TE =                              HttpHeader("TE")
  val TimingAllowOrigin =               HttpHeader("Timing-Allow-Origin")
  val Tk =                              HttpHeader("Tk")
  val Trailer =                         HttpHeader("Trailer")
  val TransferEncoding =                HttpHeader("Transfer-Encoding")
  val UpgradeInsecureRequests =         HttpHeader("Upgrade-Insecure-Requests")
  val UserAgent =                       HttpHeader("User-Agent")
  val Vary =                            HttpHeader("Vary")
  val Via =                             HttpHeader("Via")
  val WWWAuthenticate =                 HttpHeader("WWW-Authenticate")
  val Warning =                         HttpHeader("Warning")
  val XContentTypeOptions =             HttpHeader("X-Content-Type-Options")
  val XDNSPrefetchControl =             HttpHeader("X-DNS-Prefetch-Control")
  val XForwardedFor =                   HttpHeader("X-Forwarded-For")
  val XForwardedHost =                  HttpHeader("X-Forwarded-Host")
  val XForwardedProto =                 HttpHeader("X-Forwarded-Proto")
  val XFrameOptions =                   HttpHeader("X-Frame-Options")
  val XXSSProtection =                  HttpHeader("X-XSS-Protection")

}
